okhttp3/Address = Okhttp3.Address
  <init>(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V = .ctor(string, int, Okhttp3.IDns, Javax.Net.SocketFactory, Javax.Net.Ssl.SSLSocketFactory, Javax.Net.Ssl.IHostnameVerifier, Okhttp3.CertificatePinner, Okhttp3.IAuthenticator, Java.Net.Proxy, System.Collections.Generic.IList<Okhttp3.Protocol>, System.Collections.Generic.IList<Okhttp3.ConnectionSpec>, Java.Net.ProxySelector)
  certificatePinner()Lokhttp3/CertificatePinner; = CertificatePinner()
  connectionSpecs()Ljava/util/List; = ConnectionSpecs()
  dns()Lokhttp3/Dns; = Dns()
  hostnameVerifier()Ljavax/net/ssl/HostnameVerifier; = HostnameVerifier()
  protocols()Ljava/util/List; = Protocols()
  proxy()Ljava/net/Proxy; = Proxy()
  proxyAuthenticator()Lokhttp3/Authenticator; = ProxyAuthenticator()
  proxySelector()Ljava/net/ProxySelector; = ProxySelector()
  socketFactory()Ljavax/net/SocketFactory; = SocketFactory()
  sslSocketFactory()Ljavax/net/ssl/SSLSocketFactory; = SslSocketFactory()
  url()Lokhttp3/HttpUrl; = Url()
okhttp3/Authenticator = Okhttp3.IAuthenticator
  NONE = None
  authenticate(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request; = Authenticate(Okhttp3.Route, Okhttp3.Response)
okhttp3/Cache = Okhttp3.Cache
  <init>(Ljava/io/File;J)V = .ctor(Java.IO.File, long)
  isClosed()Z = IsClosed
  close()V = Close()
  delete()V = Delete()
  directory()Ljava/io/File; = Directory()
  evictAll()V = EvictAll()
  flush()V = Flush()
  hitCount()I = HitCount()
  initialize()V = Initialize()
  key(Lokhttp3/HttpUrl;)Ljava/lang/String; = Key(Okhttp3.HttpUrl)
  maxSize()J = MaxSize()
  networkCount()I = NetworkCount()
  requestCount()I = RequestCount()
  size()J = Size()
  urls()Ljava/util/Iterator; = Urls()
  writeAbortCount()I = WriteAbortCount()
  writeSuccessCount()I = WriteSuccessCount()
okhttp3/CacheControl = Okhttp3.CacheControl
  FORCE_CACHE = ForceCache
  FORCE_NETWORK = ForceNetwork
  isPrivate()Z = IsPrivate
  isPublic()Z = IsPublic
  immutable()Z = Immutable()
  maxAgeSeconds()I = MaxAgeSeconds()
  maxStaleSeconds()I = MaxStaleSeconds()
  minFreshSeconds()I = MinFreshSeconds()
  mustRevalidate()Z = MustRevalidate()
  noCache()Z = NoCache()
  noStore()Z = NoStore()
  noTransform()Z = NoTransform()
  onlyIfCached()Z = OnlyIfCached()
  parse(Lokhttp3/Headers;)Lokhttp3/CacheControl; = Parse(Okhttp3.Headers)
  sMaxAgeSeconds()I = SMaxAgeSeconds()
okhttp3/Call = Okhttp3.ICall
  isCanceled()Z = IsCanceled
  isExecuted()Z = IsExecuted
  cancel()V = Cancel()
  clone()Lokhttp3/Call; = Clone()
  enqueue(Lokhttp3/Callback;)V = Enqueue(Okhttp3.ICallback)
  execute()Lokhttp3/Response; = Execute()
  request()Lokhttp3/Request; = Request()
  timeout()Lokio/Timeout; = Timeout()
okhttp3/Callback = Okhttp3.ICallback
  onFailure(Lokhttp3/Call;Ljava/io/IOException;)V = OnFailure(Okhttp3.ICall, Java.IO.IOException)
  onResponse(Lokhttp3/Call;Lokhttp3/Response;)V = OnResponse(Okhttp3.ICall, Okhttp3.Response)
okhttp3/CertificatePinner = Okhttp3.CertificatePinner
  DEFAULT = Default
  check(Ljava/lang/String;[Ljava/security/cert/Certificate;)V = Check(string, params Java.Security.Cert.Certificate[])
  check(Ljava/lang/String;Ljava/util/List;)V = Check(string, System.Collections.Generic.IList<Java.Security.Cert.Certificate>)
  pin(Ljava/security/cert/Certificate;)Ljava/lang/String; = InvokePin(Java.Security.Cert.Certificate)
okhttp3/Challenge = Okhttp3.Challenge
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/lang/String;Ljava/util/Map;)V = .ctor(string, System.Collections.Generic.IDictionary<string, string>)
  authParams()Ljava/util/Map; = AuthParams()
  charset()Ljava/nio/charset/Charset; = Charset()
  realm()Ljava/lang/String; = Realm()
  scheme()Ljava/lang/String; = Scheme()
  withCharset(Ljava/nio/charset/Charset;)Lokhttp3/Challenge; = WithCharset(Java.Nio.Charset.Charset)
okhttp3/CipherSuite = Okhttp3.CipherSuite
  TLS_AES_128_CCM_SHA256 = TlsAes128CcmSha256
  TLS_AES_128_GCM_SHA256 = TlsAes128GcmSha256
  TLS_AES_256_CCM_8_SHA256 = TlsAes256Ccm8Sha256
  TLS_AES_256_GCM_SHA384 = TlsAes256GcmSha384
  TLS_CHACHA20_POLY1305_SHA256 = TlsChacha20Poly1305Sha256
  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = TLSDHAnonEXPORTWITHDES40CBCSHA
  TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = TLSDHAnonEXPORTWITHRC440MD5
  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = TLSDHAnonWITH3DESEDECBCSHA
  TLS_DH_anon_WITH_AES_128_CBC_SHA = TLSDHAnonWITHAES128CBCSHA
  TLS_DH_anon_WITH_AES_128_CBC_SHA256 = TLSDHAnonWITHAES128CBCSHA256
  TLS_DH_anon_WITH_AES_128_GCM_SHA256 = TLSDHAnonWITHAES128GCMSHA256
  TLS_DH_anon_WITH_AES_256_CBC_SHA = TLSDHAnonWITHAES256CBCSHA
  TLS_DH_anon_WITH_AES_256_CBC_SHA256 = TLSDHAnonWITHAES256CBCSHA256
  TLS_DH_anon_WITH_AES_256_GCM_SHA384 = TLSDHAnonWITHAES256GCMSHA384
  TLS_DH_anon_WITH_DES_CBC_SHA = TLSDHAnonWITHDESCBCSHA
  TLS_DH_anon_WITH_RC4_128_MD5 = TLSDHAnonWITHRC4128MD5
  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = TlsDheDssExportWithDes40CbcSha
  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = TlsDheDssWith3desEdeCbcSha
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA = TlsDheDssWithAes128CbcSha
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = TlsDheDssWithAes128CbcSha256
  TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = TlsDheDssWithAes128GcmSha256
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA = TlsDheDssWithAes256CbcSha
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = TlsDheDssWithAes256CbcSha256
  TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = TlsDheDssWithAes256GcmSha384
  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = TlsDheDssWithCamellia128CbcSha
  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = TlsDheDssWithCamellia256CbcSha
  TLS_DHE_DSS_WITH_DES_CBC_SHA = TlsDheDssWithDesCbcSha
  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = TlsDheRsaExportWithDes40CbcSha
  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = TlsDheRsaWith3desEdeCbcSha
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA = TlsDheRsaWithAes128CbcSha
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = TlsDheRsaWithAes128CbcSha256
  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = TlsDheRsaWithAes128GcmSha256
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA = TlsDheRsaWithAes256CbcSha
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = TlsDheRsaWithAes256CbcSha256
  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = TlsDheRsaWithAes256GcmSha384
  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = TlsDheRsaWithCamellia128CbcSha
  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = TlsDheRsaWithCamellia256CbcSha
  TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = TlsDheRsaWithChacha20Poly1305Sha256
  TLS_DHE_RSA_WITH_DES_CBC_SHA = TlsDheRsaWithDesCbcSha
  TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = TLSECDHAnonWITH3DESEDECBCSHA
  TLS_ECDH_anon_WITH_AES_128_CBC_SHA = TLSECDHAnonWITHAES128CBCSHA
  TLS_ECDH_anon_WITH_AES_256_CBC_SHA = TLSECDHAnonWITHAES256CBCSHA
  TLS_ECDH_anon_WITH_NULL_SHA = TLSECDHAnonWITHNULLSHA
  TLS_ECDH_anon_WITH_RC4_128_SHA = TLSECDHAnonWITHRC4128SHA
  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = TlsEcdhEcdsaWith3desEdeCbcSha
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = TlsEcdhEcdsaWithAes128CbcSha
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = TlsEcdhEcdsaWithAes128CbcSha256
  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = TlsEcdhEcdsaWithAes128GcmSha256
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = TlsEcdhEcdsaWithAes256CbcSha
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = TlsEcdhEcdsaWithAes256CbcSha384
  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = TlsEcdhEcdsaWithAes256GcmSha384
  TLS_ECDH_ECDSA_WITH_NULL_SHA = TlsEcdhEcdsaWithNullSha
  TLS_ECDH_ECDSA_WITH_RC4_128_SHA = TlsEcdhEcdsaWithRc4128Sha
  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = TlsEcdheEcdsaWith3desEdeCbcSha
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = TlsEcdheEcdsaWithAes128CbcSha
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = TlsEcdheEcdsaWithAes128CbcSha256
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = TlsEcdheEcdsaWithAes128GcmSha256
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = TlsEcdheEcdsaWithAes256CbcSha
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = TlsEcdheEcdsaWithAes256CbcSha384
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = TlsEcdheEcdsaWithAes256GcmSha384
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = TlsEcdheEcdsaWithChacha20Poly1305Sha256
  TLS_ECDHE_ECDSA_WITH_NULL_SHA = TlsEcdheEcdsaWithNullSha
  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = TlsEcdheEcdsaWithRc4128Sha
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = TlsEcdhePskWithAes128CbcSha
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = TlsEcdhePskWithAes256CbcSha
  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = TlsEcdhePskWithChacha20Poly1305Sha256
  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = TlsEcdheRsaWith3desEdeCbcSha
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = TlsEcdheRsaWithAes128CbcSha
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = TlsEcdheRsaWithAes128CbcSha256
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = TlsEcdheRsaWithAes128GcmSha256
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = TlsEcdheRsaWithAes256CbcSha
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = TlsEcdheRsaWithAes256CbcSha384
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = TlsEcdheRsaWithAes256GcmSha384
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = TlsEcdheRsaWithChacha20Poly1305Sha256
  TLS_ECDHE_RSA_WITH_NULL_SHA = TlsEcdheRsaWithNullSha
  TLS_ECDHE_RSA_WITH_RC4_128_SHA = TlsEcdheRsaWithRc4128Sha
  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = TlsEcdhRsaWith3desEdeCbcSha
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = TlsEcdhRsaWithAes128CbcSha
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = TlsEcdhRsaWithAes128CbcSha256
  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = TlsEcdhRsaWithAes128GcmSha256
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = TlsEcdhRsaWithAes256CbcSha
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = TlsEcdhRsaWithAes256CbcSha384
  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = TlsEcdhRsaWithAes256GcmSha384
  TLS_ECDH_RSA_WITH_NULL_SHA = TlsEcdhRsaWithNullSha
  TLS_ECDH_RSA_WITH_RC4_128_SHA = TlsEcdhRsaWithRc4128Sha
  TLS_EMPTY_RENEGOTIATION_INFO_SCSV = TlsEmptyRenegotiationInfoScsv
  TLS_FALLBACK_SCSV = TlsFallbackScsv
  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = TlsKrb5ExportWithDesCbc40Md5
  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = TlsKrb5ExportWithDesCbc40Sha
  TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = TlsKrb5ExportWithRc440Md5
  TLS_KRB5_EXPORT_WITH_RC4_40_SHA = TlsKrb5ExportWithRc440Sha
  TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = TlsKrb5With3desEdeCbcMd5
  TLS_KRB5_WITH_3DES_EDE_CBC_SHA = TlsKrb5With3desEdeCbcSha
  TLS_KRB5_WITH_DES_CBC_MD5 = TlsKrb5WithDesCbcMd5
  TLS_KRB5_WITH_DES_CBC_SHA = TlsKrb5WithDesCbcSha
  TLS_KRB5_WITH_RC4_128_MD5 = TlsKrb5WithRc4128Md5
  TLS_KRB5_WITH_RC4_128_SHA = TlsKrb5WithRc4128Sha
  TLS_PSK_WITH_3DES_EDE_CBC_SHA = TlsPskWith3desEdeCbcSha
  TLS_PSK_WITH_AES_128_CBC_SHA = TlsPskWithAes128CbcSha
  TLS_PSK_WITH_AES_256_CBC_SHA = TlsPskWithAes256CbcSha
  TLS_PSK_WITH_RC4_128_SHA = TlsPskWithRc4128Sha
  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = TlsRsaExportWithDes40CbcSha
  TLS_RSA_EXPORT_WITH_RC4_40_MD5 = TlsRsaExportWithRc440Md5
  TLS_RSA_WITH_3DES_EDE_CBC_SHA = TlsRsaWith3desEdeCbcSha
  TLS_RSA_WITH_AES_128_CBC_SHA = TlsRsaWithAes128CbcSha
  TLS_RSA_WITH_AES_128_CBC_SHA256 = TlsRsaWithAes128CbcSha256
  TLS_RSA_WITH_AES_128_GCM_SHA256 = TlsRsaWithAes128GcmSha256
  TLS_RSA_WITH_AES_256_CBC_SHA = TlsRsaWithAes256CbcSha
  TLS_RSA_WITH_AES_256_CBC_SHA256 = TlsRsaWithAes256CbcSha256
  TLS_RSA_WITH_AES_256_GCM_SHA384 = TlsRsaWithAes256GcmSha384
  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = TlsRsaWithCamellia128CbcSha
  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = TlsRsaWithCamellia256CbcSha
  TLS_RSA_WITH_DES_CBC_SHA = TlsRsaWithDesCbcSha
  TLS_RSA_WITH_NULL_MD5 = TlsRsaWithNullMd5
  TLS_RSA_WITH_NULL_SHA = TlsRsaWithNullSha
  TLS_RSA_WITH_NULL_SHA256 = TlsRsaWithNullSha256
  TLS_RSA_WITH_RC4_128_MD5 = TlsRsaWithRc4128Md5
  TLS_RSA_WITH_RC4_128_SHA = TlsRsaWithRc4128Sha
  TLS_RSA_WITH_SEED_CBC_SHA = TlsRsaWithSeedCbcSha
  forJavaName(Ljava/lang/String;)Lokhttp3/CipherSuite; = ForJavaName(string)
  javaName()Ljava/lang/String; = JavaName()
okhttp3/Connection = Okhttp3.IConnection
  handshake()Lokhttp3/Handshake; = Handshake()
  protocol()Lokhttp3/Protocol; = Protocol()
  route()Lokhttp3/Route; = Route()
  socket()Ljava/net/Socket; = Socket()
okhttp3/ConnectionPool = Okhttp3.ConnectionPool
  <init>()V = .ctor()
  <init>(IJLjava/util/concurrent/TimeUnit;)V = .ctor(int, long, Java.Util.Concurrent.TimeUnit)
  connectionCount()I = ConnectionCount()
  evictAll()V = EvictAll()
  idleConnectionCount()I = IdleConnectionCount()
okhttp3/ConnectionSpec = Okhttp3.ConnectionSpec
  CLEARTEXT = Cleartext
  COMPATIBLE_TLS = CompatibleTls
  MODERN_TLS = ModernTls
  RESTRICTED_TLS = RestrictedTls
  isTls()Z = IsTls
  cipherSuites()Ljava/util/List; = CipherSuites()
  isCompatible(Ljavax/net/ssl/SSLSocket;)Z = IsCompatible(Javax.Net.Ssl.SSLSocket)
  supportsTlsExtensions()Z = SupportsTlsExtensions()
  tlsVersions()Ljava/util/List; = TlsVersions()
okhttp3/Cookie = Okhttp3.Cookie
  domain()Ljava/lang/String; = Domain()
  expiresAt()J = ExpiresAt()
  hostOnly()Z = HostOnly()
  httpOnly()Z = HttpOnly()
  matches(Lokhttp3/HttpUrl;)Z = Matches(Okhttp3.HttpUrl)
  name()Ljava/lang/String; = Name()
  parse(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/Cookie; = Parse(Okhttp3.HttpUrl, string)
  parseAll(Lokhttp3/HttpUrl;Lokhttp3/Headers;)Ljava/util/List; = ParseAll(Okhttp3.HttpUrl, Okhttp3.Headers)
  path()Ljava/lang/String; = Path()
  persistent()Z = Persistent()
  secure()Z = Secure()
  value()Ljava/lang/String; = Value()
okhttp3/CookieJar = Okhttp3.ICookieJar
  NO_COOKIES = NoCookies
  loadForRequest(Lokhttp3/HttpUrl;)Ljava/util/List; = LoadForRequest(Okhttp3.HttpUrl)
  saveFromResponse(Lokhttp3/HttpUrl;Ljava/util/List;)V = SaveFromResponse(Okhttp3.HttpUrl, System.Collections.Generic.IList<Okhttp3.Cookie>)
okhttp3/Credentials = Okhttp3.Credentials
  basic(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Basic(string, string)
  basic(Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String; = Basic(string, string, Java.Nio.Charset.Charset)
okhttp3/Dispatcher = Okhttp3.Dispatcher
  <init>()V = .ctor()
  <init>(Ljava/util/concurrent/ExecutorService;)V = .ctor(Java.Util.Concurrent.IExecutorService)
  getMaxRequests()I = MaxRequests
  setMaxRequests(I)V = MaxRequests
  getMaxRequestsPerHost()I = MaxRequestsPerHost
  setMaxRequestsPerHost(I)V = MaxRequestsPerHost
  cancelAll()V = CancelAll()
  executorService()Ljava/util/concurrent/ExecutorService; = ExecutorService()
  queuedCalls()Ljava/util/List; = QueuedCalls()
  queuedCallsCount()I = QueuedCallsCount()
  runningCalls()Ljava/util/List; = RunningCalls()
  runningCallsCount()I = RunningCallsCount()
  setIdleCallback(Ljava/lang/Runnable;)V = SetIdleCallback(Java.Lang.IRunnable)
okhttp3/Dns = Okhttp3.IDns
  SYSTEM = System
  lookup(Ljava/lang/String;)Ljava/util/List; = Lookup(string)
okhttp3/EventListener = Okhttp3.EventListener
  <init>()V = .ctor()
  NONE = None
  callEnd(Lokhttp3/Call;)V = CallEnd(Okhttp3.ICall)
  callFailed(Lokhttp3/Call;Ljava/io/IOException;)V = CallFailed(Okhttp3.ICall, Java.IO.IOException)
  callStart(Lokhttp3/Call;)V = CallStart(Okhttp3.ICall)
  connectEnd(Lokhttp3/Call;Ljava/net/InetSocketAddress;Ljava/net/Proxy;Lokhttp3/Protocol;)V = ConnectEnd(Okhttp3.ICall, Java.Net.InetSocketAddress, Java.Net.Proxy, Okhttp3.Protocol)
  connectFailed(Lokhttp3/Call;Ljava/net/InetSocketAddress;Ljava/net/Proxy;Lokhttp3/Protocol;Ljava/io/IOException;)V = ConnectFailed(Okhttp3.ICall, Java.Net.InetSocketAddress, Java.Net.Proxy, Okhttp3.Protocol, Java.IO.IOException)
  connectionAcquired(Lokhttp3/Call;Lokhttp3/Connection;)V = ConnectionAcquired(Okhttp3.ICall, Okhttp3.IConnection)
  connectionReleased(Lokhttp3/Call;Lokhttp3/Connection;)V = ConnectionReleased(Okhttp3.ICall, Okhttp3.IConnection)
  connectStart(Lokhttp3/Call;Ljava/net/InetSocketAddress;Ljava/net/Proxy;)V = ConnectStart(Okhttp3.ICall, Java.Net.InetSocketAddress, Java.Net.Proxy)
  dnsEnd(Lokhttp3/Call;Ljava/lang/String;Ljava/util/List;)V = DnsEnd(Okhttp3.ICall, string, System.Collections.Generic.IList<Java.Net.InetAddress>)
  dnsStart(Lokhttp3/Call;Ljava/lang/String;)V = DnsStart(Okhttp3.ICall, string)
  requestBodyEnd(Lokhttp3/Call;J)V = RequestBodyEnd(Okhttp3.ICall, long)
  requestBodyStart(Lokhttp3/Call;)V = RequestBodyStart(Okhttp3.ICall)
  requestHeadersEnd(Lokhttp3/Call;Lokhttp3/Request;)V = RequestHeadersEnd(Okhttp3.ICall, Okhttp3.Request)
  requestHeadersStart(Lokhttp3/Call;)V = RequestHeadersStart(Okhttp3.ICall)
  responseBodyEnd(Lokhttp3/Call;J)V = ResponseBodyEnd(Okhttp3.ICall, long)
  responseBodyStart(Lokhttp3/Call;)V = ResponseBodyStart(Okhttp3.ICall)
  responseHeadersEnd(Lokhttp3/Call;Lokhttp3/Response;)V = ResponseHeadersEnd(Okhttp3.ICall, Okhttp3.Response)
  responseHeadersStart(Lokhttp3/Call;)V = ResponseHeadersStart(Okhttp3.ICall)
  secureConnectEnd(Lokhttp3/Call;Lokhttp3/Handshake;)V = SecureConnectEnd(Okhttp3.ICall, Okhttp3.Handshake)
  secureConnectStart(Lokhttp3/Call;)V = SecureConnectStart(Okhttp3.ICall)
okhttp3/FormBody = Okhttp3.FormBody
  contentType()Lokhttp3/MediaType; = ContentType()
  encodedName(I)Ljava/lang/String; = EncodedName(int)
  encodedValue(I)Ljava/lang/String; = EncodedValue(int)
  name(I)Ljava/lang/String; = Name(int)
  size()I = Size()
  value(I)Ljava/lang/String; = Value(int)
  writeTo(Lokio/BufferedSink;)V = WriteTo(Okio.IBufferedSink)
okhttp3/Handshake = Okhttp3.Handshake
  cipherSuite()Lokhttp3/CipherSuite; = CipherSuite()
  get(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake; = Get(Javax.Net.Ssl.ISSLSession)
  get(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake; = Get(Okhttp3.TlsVersion, Okhttp3.CipherSuite, System.Collections.Generic.IList<Java.Security.Cert.Certificate>, System.Collections.Generic.IList<Java.Security.Cert.Certificate>)
  localCertificates()Ljava/util/List; = LocalCertificates()
  localPrincipal()Ljava/security/Principal; = LocalPrincipal()
  peerCertificates()Ljava/util/List; = PeerCertificates()
  peerPrincipal()Ljava/security/Principal; = PeerPrincipal()
  tlsVersion()Lokhttp3/TlsVersion; = TlsVersion()
okhttp3/Headers = Okhttp3.Headers
  byteCount()J = ByteCount()
  get(Ljava/lang/String;)Ljava/lang/String; = Get(string)
  getDate(Ljava/lang/String;)Ljava/util/Date; = GetDate(string)
  name(I)Ljava/lang/String; = Name(int)
  names()Ljava/util/Set; = Names()
  newBuilder()Lokhttp3/Headers$Builder; = NewBuilder()
  of([Ljava/lang/String;)Lokhttp3/Headers; = Of(params string[])
  of(Ljava/util/Map;)Lokhttp3/Headers; = Of(System.Collections.Generic.IDictionary<string, string>)
  size()I = Size()
  toMultimap()Ljava/util/Map; = ToMultimap()
  value(I)Ljava/lang/String; = Value(int)
  values(Ljava/lang/String;)Ljava/util/List; = Values(string)
okhttp3/HttpUrl = Okhttp3.HttpUrl
  isHttps()Z = IsHttps
  defaultPort(Ljava/lang/String;)I = DefaultPort(string)
  encodedFragment()Ljava/lang/String; = EncodedFragment()
  encodedPassword()Ljava/lang/String; = EncodedPassword()
  encodedPath()Ljava/lang/String; = EncodedPath()
  encodedPathSegments()Ljava/util/List; = EncodedPathSegments()
  encodedQuery()Ljava/lang/String; = EncodedQuery()
  encodedUsername()Ljava/lang/String; = EncodedUsername()
  fragment()Ljava/lang/String; = Fragment()
  get(Ljava/lang/String;)Lokhttp3/HttpUrl; = Get(string)
  get(Ljava/net/URI;)Lokhttp3/HttpUrl; = Get(Java.Net.URI)
  get(Ljava/net/URL;)Lokhttp3/HttpUrl; = Get(Java.Net.URL)
  host()Ljava/lang/String; = Host()
  newBuilder()Lokhttp3/HttpUrl$Builder; = NewBuilder()
  newBuilder(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder; = NewBuilder(string)
  parse(Ljava/lang/String;)Lokhttp3/HttpUrl; = Parse(string)
  password()Ljava/lang/String; = Password()
  pathSegments()Ljava/util/List; = PathSegments()
  pathSize()I = PathSize()
  port()I = Port()
  query()Ljava/lang/String; = Query()
  queryParameter(Ljava/lang/String;)Ljava/lang/String; = QueryParameter(string)
  queryParameterName(I)Ljava/lang/String; = QueryParameterName(int)
  queryParameterNames()Ljava/util/Set; = QueryParameterNames()
  queryParameterValue(I)Ljava/lang/String; = QueryParameterValue(int)
  queryParameterValues(Ljava/lang/String;)Ljava/util/List; = QueryParameterValues(string)
  querySize()I = QuerySize()
  redact()Ljava/lang/String; = Redact()
  resolve(Ljava/lang/String;)Lokhttp3/HttpUrl; = Resolve(string)
  scheme()Ljava/lang/String; = Scheme()
  topPrivateDomain()Ljava/lang/String; = TopPrivateDomain()
  uri()Ljava/net/URI; = Uri()
  url()Ljava/net/URL; = Url()
  username()Ljava/lang/String; = Username()
okhttp3/Interceptor = Okhttp3.IInterceptor
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
okhttp3/internal/annotations/EverythingIsNonNull = Okhttp3.Internal.Annotations.IEverythingIsNonNull
okhttp3/internal/cache/CacheInterceptor = Okhttp3.Internal.Cache.CacheInterceptor
  <init>(Lokhttp3/internal/cache/InternalCache;)V = .ctor(Okhttp3.Internal.Cache.IInternalCache)
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
okhttp3/internal/cache/CacheRequest = Okhttp3.Internal.Cache.ICacheRequest
  abort()V = Abort()
  body()Lokio/Sink; = Body()
okhttp3/internal/cache/CacheStrategy = Okhttp3.Internal.Cache.CacheStrategy
  cacheResponse = CacheResponse
  networkRequest = NetworkRequest
  isCacheable(Lokhttp3/Response;Lokhttp3/Request;)Z = IsCacheable(Okhttp3.Response, Okhttp3.Request)
okhttp3/internal/cache/DiskLruCache = Okhttp3.Internal.Cache.DiskLruCache
  getDirectory()Ljava/io/File; = Directory
  isClosed()Z = IsClosed
  getMaxSize()J = MaxSize
  setMaxSize(J)V = MaxSize
  close()V = Close()
  create(Lokhttp3/internal/io/FileSystem;Ljava/io/File;IIJ)Lokhttp3/internal/cache/DiskLruCache; = Create(Okhttp3.Internal.IO.IFileSystem, Java.IO.File, int, int, long)
  delete()V = Delete()
  edit(Ljava/lang/String;)Lokhttp3/internal/cache/DiskLruCache$Editor; = Edit(string)
  evictAll()V = EvictAll()
  flush()V = Flush()
  get(Ljava/lang/String;)Lokhttp3/internal/cache/DiskLruCache$Snapshot; = Get(string)
  initialize()V = Initialize()
  remove(Ljava/lang/String;)Z = Remove(string)
  size()J = Size()
  snapshots()Ljava/util/Iterator; = Snapshots()
okhttp3/internal/cache/InternalCache = Okhttp3.Internal.Cache.IInternalCache
  get(Lokhttp3/Request;)Lokhttp3/Response; = Get(Okhttp3.Request)
  put(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest; = Put(Okhttp3.Response)
  remove(Lokhttp3/Request;)V = Remove(Okhttp3.Request)
  trackConditionalCacheHit()V = TrackConditionalCacheHit()
  trackResponse(Lokhttp3/internal/cache/CacheStrategy;)V = TrackResponse(Okhttp3.Internal.Cache.CacheStrategy)
  update(Lokhttp3/Response;Lokhttp3/Response;)V = Update(Okhttp3.Response, Okhttp3.Response)
okhttp3/internal/connection/ConnectInterceptor = Okhttp3.Internal.Connection.ConnectInterceptor
  <init>(Lokhttp3/OkHttpClient;)V = .ctor(Okhttp3.OkHttpClient)
  client = Client
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
okhttp3/internal/connection/ConnectionSpecSelector = Okhttp3.Internal.Connection.ConnectionSpecSelector
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Okhttp3.ConnectionSpec>)
  configureSecureSocket(Ljavax/net/ssl/SSLSocket;)Lokhttp3/ConnectionSpec; = ConfigureSecureSocket(Javax.Net.Ssl.SSLSocket)
  connectionFailed(Ljava/io/IOException;)Z = ConnectionFailed(Java.IO.IOException)
okhttp3/internal/connection/RealConnection = Okhttp3.Internal.Connection.RealConnection
  <init>(Lokhttp3/ConnectionPool;Lokhttp3/Route;)V = .ctor(Okhttp3.ConnectionPool, Okhttp3.Route)
  allocationLimit = AllocationLimit
  allocations = Allocations
  idleAtNanos = IdleAtNanos
  noNewStreams = NoNewStreams
  successCount = SuccessCount
  isMultiplexed()Z = IsMultiplexed
  cancel()V = Cancel()
  connect(IIIIZLokhttp3/Call;Lokhttp3/EventListener;)V = Connect(int, int, int, int, bool, Okhttp3.ICall, Okhttp3.EventListener)
  handshake()Lokhttp3/Handshake; = Handshake()
  isEligible(Lokhttp3/Address;Lokhttp3/Route;)Z = IsEligible(Okhttp3.Address, Okhttp3.Route)
  isHealthy(Z)Z = IsHealthy(bool)
  newCodec(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;)Lokhttp3/internal/http/HttpCodec; = NewCodec(Okhttp3.OkHttpClient, Okhttp3.IInterceptorChain, Okhttp3.Internal.Connection.StreamAllocation)
  newWebSocketStreams(Lokhttp3/internal/connection/StreamAllocation;)Lokhttp3/internal/ws/RealWebSocket$Streams; = NewWebSocketStreams(Okhttp3.Internal.Connection.StreamAllocation)
  onStream(Lokhttp3/internal/http2/Http2Stream;)V = OnStream(Okhttp3.Internal.Http2.Http2Stream)
  protocol()Lokhttp3/Protocol; = Protocol()
  route()Lokhttp3/Route; = Route()
  socket()Ljava/net/Socket; = Socket()
  supportsUrl(Lokhttp3/HttpUrl;)Z = SupportsUrl(Okhttp3.HttpUrl)
  testConnection(Lokhttp3/ConnectionPool;Lokhttp3/Route;Ljava/net/Socket;J)Lokhttp3/internal/connection/RealConnection; = TestConnection(Okhttp3.ConnectionPool, Okhttp3.Route, Java.Net.Socket, long)
okhttp3/internal/connection/RouteDatabase = Okhttp3.Internal.Connection.RouteDatabase
  <init>()V = .ctor()
  connected(Lokhttp3/Route;)V = Connected(Okhttp3.Route)
  failed(Lokhttp3/Route;)V = Failed(Okhttp3.Route)
  shouldPostpone(Lokhttp3/Route;)Z = ShouldPostpone(Okhttp3.Route)
okhttp3/internal/connection/RouteException = Okhttp3.Internal.Connection.RouteException
  <init>(Ljava/io/IOException;)V = .ctor(Java.IO.IOException)
  getFirstConnectException()Ljava/io/IOException; = FirstConnectException
  getLastConnectException()Ljava/io/IOException; = LastConnectException
  addConnectException(Ljava/io/IOException;)V = AddConnectException(Java.IO.IOException)
okhttp3/internal/connection/RouteSelector = Okhttp3.Internal.Connection.RouteSelector
  <init>(Lokhttp3/Address;Lokhttp3/internal/connection/RouteDatabase;Lokhttp3/Call;Lokhttp3/EventListener;)V = .ctor(Okhttp3.Address, Okhttp3.Internal.Connection.RouteDatabase, Okhttp3.ICall, Okhttp3.EventListener)
  hasNext()Z = HasNext
  connectFailed(Lokhttp3/Route;Ljava/io/IOException;)V = ConnectFailed(Okhttp3.Route, Java.IO.IOException)
  next()Lokhttp3/internal/connection/RouteSelector$Selection; = Next()
okhttp3/internal/connection/StreamAllocation = Okhttp3.Internal.Connection.StreamAllocation
  <init>(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V = .ctor(Okhttp3.ConnectionPool, Okhttp3.Address, Okhttp3.ICall, Okhttp3.EventListener, Java.Lang.Object)
  address = Address
  call = Call
  eventListener = EventListener
  hasMoreRoutes()Z = HasMoreRoutes
  acquire(Lokhttp3/internal/connection/RealConnection;Z)V = Acquire(Okhttp3.Internal.Connection.RealConnection, bool)
  cancel()V = Cancel()
  codec()Lokhttp3/internal/http/HttpCodec; = Codec()
  connection()Lokhttp3/internal/connection/RealConnection; = Connection()
  newStream(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Z)Lokhttp3/internal/http/HttpCodec; = NewStream(Okhttp3.OkHttpClient, Okhttp3.IInterceptorChain, bool)
  noNewStreams()V = NoNewStreams()
  release()V = Release()
  releaseAndAcquire(Lokhttp3/internal/connection/RealConnection;)Ljava/net/Socket; = ReleaseAndAcquire(Okhttp3.Internal.Connection.RealConnection)
  route()Lokhttp3/Route; = Route()
  streamFailed(Ljava/io/IOException;)V = StreamFailed(Java.IO.IOException)
  streamFinished(ZLokhttp3/internal/http/HttpCodec;JLjava/io/IOException;)V = StreamFinished(bool, Okhttp3.Internal.Http.IHttpCodec, long, Java.IO.IOException)
okhttp3/internal/http/BridgeInterceptor = Okhttp3.Internal.Http.BridgeInterceptor
  <init>(Lokhttp3/CookieJar;)V = .ctor(Okhttp3.ICookieJar)
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
okhttp3/internal/http/CallServerInterceptor = Okhttp3.Internal.Http.CallServerInterceptor
  <init>(Z)V = .ctor(bool)
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
okhttp3/internal/http/HttpCodec = Okhttp3.Internal.Http.IHttpCodec
  DISCARD_STREAM_TIMEOUT_MILLIS = DiscardStreamTimeoutMillis
  cancel()V = Cancel()
  createRequestBody(Lokhttp3/Request;J)Lokio/Sink; = CreateRequestBody(Okhttp3.Request, long)
  finishRequest()V = FinishRequest()
  flushRequest()V = FlushRequest()
  openResponseBody(Lokhttp3/Response;)Lokhttp3/ResponseBody; = OpenResponseBody(Okhttp3.Response)
  readResponseHeaders(Z)Lokhttp3/Response$Builder; = ReadResponseHeaders(bool)
  writeRequestHeaders(Lokhttp3/Request;)V = WriteRequestHeaders(Okhttp3.Request)
okhttp3/internal/http/HttpDate = Okhttp3.Internal.Http.HttpDate
  MAX_DATE = MaxDate
  format(Ljava/util/Date;)Ljava/lang/String; = Format(Java.Util.Date)
  parse(Ljava/lang/String;)Ljava/util/Date; = Parse(string)
okhttp3/internal/http/HttpHeaders = Okhttp3.Internal.Http.HttpHeaders
  contentLength(Lokhttp3/Headers;)J = ContentLength(Okhttp3.Headers)
  contentLength(Lokhttp3/Response;)J = ContentLength(Okhttp3.Response)
  hasBody(Lokhttp3/Response;)Z = HasBody(Okhttp3.Response)
  hasVaryAll(Lokhttp3/Headers;)Z = HasVaryAll(Okhttp3.Headers)
  hasVaryAll(Lokhttp3/Response;)Z = HasVaryAll(Okhttp3.Response)
  parseChallenges(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List; = ParseChallenges(Okhttp3.Headers, string)
  parseSeconds(Ljava/lang/String;I)I = ParseSeconds(string, int)
  receiveHeaders(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V = ReceiveHeaders(Okhttp3.ICookieJar, Okhttp3.HttpUrl, Okhttp3.Headers)
  skipUntil(Ljava/lang/String;ILjava/lang/String;)I = SkipUntil(string, int, string)
  skipWhitespace(Ljava/lang/String;I)I = SkipWhitespace(string, int)
  varyFields(Lokhttp3/Headers;)Ljava/util/Set; = VaryFields(Okhttp3.Headers)
  varyHeaders(Lokhttp3/Headers;Lokhttp3/Headers;)Lokhttp3/Headers; = VaryHeaders(Okhttp3.Headers, Okhttp3.Headers)
  varyHeaders(Lokhttp3/Response;)Lokhttp3/Headers; = VaryHeaders(Okhttp3.Response)
  varyMatches(Lokhttp3/Response;Lokhttp3/Headers;Lokhttp3/Request;)Z = VaryMatches(Okhttp3.Response, Okhttp3.Headers, Okhttp3.Request)
okhttp3/internal/http/HttpMethod = Okhttp3.Internal.Http.HttpMethod
  invalidatesCache(Ljava/lang/String;)Z = InvalidatesCache(string)
  permitsRequestBody(Ljava/lang/String;)Z = PermitsRequestBody(string)
  redirectsToGet(Ljava/lang/String;)Z = RedirectsToGet(string)
  redirectsWithBody(Ljava/lang/String;)Z = RedirectsWithBody(string)
  requiresRequestBody(Ljava/lang/String;)Z = RequiresRequestBody(string)
okhttp3/internal/http/RealInterceptorChain = Okhttp3.Internal.Http.RealInterceptorChain
  <init>(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V = .ctor(System.Collections.Generic.IList<Okhttp3.IInterceptor>, Okhttp3.Internal.Connection.StreamAllocation, Okhttp3.Internal.Http.IHttpCodec, Okhttp3.Internal.Connection.RealConnection, int, Okhttp3.Request, Okhttp3.ICall, Okhttp3.EventListener, int, int, int)
  call()Lokhttp3/Call; = Call()
  connection()Lokhttp3/Connection; = Connection()
  connectTimeoutMillis()I = ConnectTimeoutMillis()
  eventListener()Lokhttp3/EventListener; = EventListener()
  httpStream()Lokhttp3/internal/http/HttpCodec; = HttpStream()
  proceed(Lokhttp3/Request;)Lokhttp3/Response; = Proceed(Okhttp3.Request)
  proceed(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response; = Proceed(Okhttp3.Request, Okhttp3.Internal.Connection.StreamAllocation, Okhttp3.Internal.Http.IHttpCodec, Okhttp3.Internal.Connection.RealConnection)
  readTimeoutMillis()I = ReadTimeoutMillis()
  request()Lokhttp3/Request; = Request()
  streamAllocation()Lokhttp3/internal/connection/StreamAllocation; = StreamAllocation()
  withConnectTimeout(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain; = WithConnectTimeout(int, Java.Util.Concurrent.TimeUnit)
  withReadTimeout(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain; = WithReadTimeout(int, Java.Util.Concurrent.TimeUnit)
  withWriteTimeout(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain; = WithWriteTimeout(int, Java.Util.Concurrent.TimeUnit)
  writeTimeoutMillis()I = WriteTimeoutMillis()
okhttp3/internal/http/RealResponseBody = Okhttp3.Internal.Http.RealResponseBody
  <init>(Ljava/lang/String;JLokio/BufferedSource;)V = .ctor(string, long, Okio.IBufferedSource)
  contentLength()J = ContentLength()
  contentType()Lokhttp3/MediaType; = ContentType()
  source()Lokio/BufferedSource; = Source()
okhttp3/internal/http/RequestLine = Okhttp3.Internal.Http.RequestLine
  get(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String; = Get(Okhttp3.Request, Java.Net.Proxy.Type)
  requestPath(Lokhttp3/HttpUrl;)Ljava/lang/String; = RequestPath(Okhttp3.HttpUrl)
okhttp3/internal/http/RetryAndFollowUpInterceptor = Okhttp3.Internal.Http.RetryAndFollowUpInterceptor
  <init>(Lokhttp3/OkHttpClient;Z)V = .ctor(Okhttp3.OkHttpClient, bool)
  isCanceled()Z = IsCanceled
  cancel()V = Cancel()
  intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response; = Intercept(Okhttp3.IInterceptorChain)
  setCallStackTrace(Ljava/lang/Object;)V = SetCallStackTrace(Java.Lang.Object)
  streamAllocation()Lokhttp3/internal/connection/StreamAllocation; = StreamAllocation()
okhttp3/internal/http/StatusLine = Okhttp3.Internal.Http.StatusLine
  <init>(Lokhttp3/Protocol;ILjava/lang/String;)V = .ctor(Okhttp3.Protocol, int, string)
  code = Code
  HTTP_CONTINUE = HttpContinue
  HTTP_PERM_REDIRECT = HttpPermRedirect
  HTTP_TEMP_REDIRECT = HttpTempRedirect
  message = Message
  protocol = Protocol
  get(Lokhttp3/Response;)Lokhttp3/internal/http/StatusLine; = Get(Okhttp3.Response)
  parse(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine; = Parse(string)
okhttp3/internal/http/UnrepeatableRequestBody = Okhttp3.Internal.Http.IUnrepeatableRequestBody
okhttp3/internal/http1/Http1Codec = Okhttp3.Internal.Http1.Http1Codec
  <init>(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/StreamAllocation;Lokio/BufferedSource;Lokio/BufferedSink;)V = .ctor(Okhttp3.OkHttpClient, Okhttp3.Internal.Connection.StreamAllocation, Okio.IBufferedSource, Okio.IBufferedSink)
  isClosed()Z = IsClosed
  cancel()V = Cancel()
  createRequestBody(Lokhttp3/Request;J)Lokio/Sink; = CreateRequestBody(Okhttp3.Request, long)
  finishRequest()V = FinishRequest()
  flushRequest()V = FlushRequest()
  newChunkedSink()Lokio/Sink; = NewChunkedSink()
  newChunkedSource(Lokhttp3/HttpUrl;)Lokio/Source; = NewChunkedSource(Okhttp3.HttpUrl)
  newFixedLengthSink(J)Lokio/Sink; = NewFixedLengthSink(long)
  newFixedLengthSource(J)Lokio/Source; = NewFixedLengthSource(long)
  newUnknownLengthSource()Lokio/Source; = NewUnknownLengthSource()
  openResponseBody(Lokhttp3/Response;)Lokhttp3/ResponseBody; = OpenResponseBody(Okhttp3.Response)
  readHeaders()Lokhttp3/Headers; = ReadHeaders()
  readResponseHeaders(Z)Lokhttp3/Response$Builder; = ReadResponseHeaders(bool)
  writeRequest(Lokhttp3/Headers;Ljava/lang/String;)V = WriteRequest(Okhttp3.Headers, string)
  writeRequestHeaders(Lokhttp3/Request;)V = WriteRequestHeaders(Okhttp3.Request)
okhttp3/internal/http2/ConnectionShutdownException = Okhttp3.Internal.Http2.ConnectionShutdownException
  <init>()V = .ctor()
okhttp3/internal/http2/ErrorCode = Okhttp3.Internal.Http2.ErrorCode
  CANCEL = Cancel
  COMPRESSION_ERROR = CompressionError
  CONNECT_ERROR = ConnectError
  ENHANCE_YOUR_CALM = EnhanceYourCalm
  FLOW_CONTROL_ERROR = FlowControlError
  HTTP_1_1_REQUIRED = Http11Required
  httpCode = HttpCode
  INADEQUATE_SECURITY = InadequateSecurity
  INTERNAL_ERROR = InternalError
  NO_ERROR = NoError
  PROTOCOL_ERROR = ProtocolError
  REFUSED_STREAM = RefusedStream
  fromHttp2(I)Lokhttp3/internal/http2/ErrorCode; = FromHttp2(int)
  valueOf(Ljava/lang/String;)Lokhttp3/internal/http2/ErrorCode; = ValueOf(string)
  values()[Lokhttp3/internal/http2/ErrorCode; = Values()
okhttp3/internal/http2/Header = Okhttp3.Internal.Http2.Header
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Lokio/ByteString;Ljava/lang/String;)V = .ctor(Okio.ByteString, string)
  <init>(Lokio/ByteString;Lokio/ByteString;)V = .ctor(Okio.ByteString, Okio.ByteString)
  name = Name
  PSEUDO_PREFIX = PseudoPrefix
  RESPONSE_STATUS = ResponseStatus
  RESPONSE_STATUS_UTF8 = ResponseStatusUtf8
  TARGET_AUTHORITY = TargetAuthority
  TARGET_AUTHORITY_UTF8 = TargetAuthorityUtf8
  TARGET_METHOD = TargetMethod
  TARGET_METHOD_UTF8 = TargetMethodUtf8
  TARGET_PATH = TargetPath
  TARGET_PATH_UTF8 = TargetPathUtf8
  TARGET_SCHEME = TargetScheme
  TARGET_SCHEME_UTF8 = TargetSchemeUtf8
  value = Value
okhttp3/internal/http2/Http2 = Okhttp3.Internal.Http2.Http2
okhttp3/internal/http2/Http2Codec = Okhttp3.Internal.Http2.Http2Codec
  <init>(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V = .ctor(Okhttp3.OkHttpClient, Okhttp3.IInterceptorChain, Okhttp3.Internal.Connection.StreamAllocation, Okhttp3.Internal.Http2.Http2Connection)
  cancel()V = Cancel()
  createRequestBody(Lokhttp3/Request;J)Lokio/Sink; = CreateRequestBody(Okhttp3.Request, long)
  finishRequest()V = FinishRequest()
  flushRequest()V = FlushRequest()
  http2HeadersList(Lokhttp3/Request;)Ljava/util/List; = Http2HeadersList(Okhttp3.Request)
  openResponseBody(Lokhttp3/Response;)Lokhttp3/ResponseBody; = OpenResponseBody(Okhttp3.Response)
  readHttp2HeadersList(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder; = ReadHttp2HeadersList(Okhttp3.Headers, Okhttp3.Protocol)
  readResponseHeaders(Z)Lokhttp3/Response$Builder; = ReadResponseHeaders(bool)
  writeRequestHeaders(Lokhttp3/Request;)V = WriteRequestHeaders(Okhttp3.Request)
okhttp3/internal/http2/Http2Connection = Okhttp3.Internal.Http2.Http2Connection
  isShutdown()Z = IsShutdown
  getProtocol()Lokhttp3/Protocol; = Protocol
  close()V = Close()
  flush()V = Flush()
  maxConcurrentStreams()I = MaxConcurrentStreams()
  newStream(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream; = NewStream(System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>, bool)
  openStreamCount()I = OpenStreamCount()
  pushStream(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream; = PushStream(int, System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>, bool)
  setSettings(Lokhttp3/internal/http2/Settings;)V = SetSettings(Okhttp3.Internal.Http2.Settings)
  shutdown(Lokhttp3/internal/http2/ErrorCode;)V = Shutdown(Okhttp3.Internal.Http2.ErrorCode)
  start()V = Start()
  writeData(IZLokio/Buffer;J)V = WriteData(int, bool, Okio.Buffer, long)
okhttp3/internal/http2/Http2Reader = Okhttp3.Internal.Http2.Http2Reader
  close()V = Close()
okhttp3/internal/http2/Http2Stream = Okhttp3.Internal.Http2.Http2Stream
  getConnection()Lokhttp3/internal/http2/Http2Connection; = Connection
  getErrorCode()Lokhttp3/internal/http2/ErrorCode; = ErrorCode
  getId()I = Id
  isLocallyInitiated()Z = IsLocallyInitiated
  isOpen()Z = IsOpen
  getSink()Lokio/Sink; = Sink
  getSource()Lokio/Source; = Source
  close(Lokhttp3/internal/http2/ErrorCode;)V = Close(Okhttp3.Internal.Http2.ErrorCode)
  closeLater(Lokhttp3/internal/http2/ErrorCode;)V = CloseLater(Okhttp3.Internal.Http2.ErrorCode)
  readTimeout()Lokio/Timeout; = ReadTimeout()
  takeHeaders()Lokhttp3/Headers; = TakeHeaders()
  writeHeaders(Ljava/util/List;Z)V = WriteHeaders(System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>, bool)
  writeTimeout()Lokio/Timeout; = WriteTimeout()
okhttp3/internal/http2/PushObserver = Okhttp3.Internal.Http2.IPushObserver
  CANCEL = Cancel
  onData(ILokio/BufferedSource;IZ)Z = OnData(int, Okio.IBufferedSource, int, bool)
  onHeaders(ILjava/util/List;Z)Z = OnHeaders(int, System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>, bool)
  onRequest(ILjava/util/List;)Z = OnRequest(int, System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>)
  onReset(ILokhttp3/internal/http2/ErrorCode;)V = OnReset(int, Okhttp3.Internal.Http2.ErrorCode)
okhttp3/internal/http2/Settings = Okhttp3.Internal.Http2.Settings
  <init>()V = .ctor()
okhttp3/internal/http2/StreamResetException = Okhttp3.Internal.Http2.StreamResetException
  <init>(Lokhttp3/internal/http2/ErrorCode;)V = .ctor(Okhttp3.Internal.Http2.ErrorCode)
  errorCode = ErrorCode
okhttp3/internal/Internal = Okhttp3.Internal.Internal
  <init>()V = .ctor()
  instance = Instance
  addLenient(Lokhttp3/Headers$Builder;Ljava/lang/String;)V = AddLenient(Okhttp3.Headers.Builder, string)
  addLenient(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V = AddLenient(Okhttp3.Headers.Builder, string, string)
  apply(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V = Apply(Okhttp3.ConnectionSpec, Javax.Net.Ssl.SSLSocket, bool)
  code(Lokhttp3/Response$Builder;)I = Code(Okhttp3.Response.Builder)
  connectionBecameIdle(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)Z = ConnectionBecameIdle(Okhttp3.ConnectionPool, Okhttp3.Internal.Connection.RealConnection)
  deduplicate(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket; = Deduplicate(Okhttp3.ConnectionPool, Okhttp3.Address, Okhttp3.Internal.Connection.StreamAllocation)
  equalsNonHost(Lokhttp3/Address;Lokhttp3/Address;)Z = EqualsNonHost(Okhttp3.Address, Okhttp3.Address)
  get(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection; = Get(Okhttp3.ConnectionPool, Okhttp3.Address, Okhttp3.Internal.Connection.StreamAllocation, Okhttp3.Route)
  initializeInstanceForTests()V = InitializeInstanceForTests()
  isInvalidHttpUrlHost(Ljava/lang/IllegalArgumentException;)Z = IsInvalidHttpUrlHost(Java.Lang.IllegalArgumentException)
  newWebSocketCall(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Call; = NewWebSocketCall(Okhttp3.OkHttpClient, Okhttp3.Request)
  put(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)V = Put(Okhttp3.ConnectionPool, Okhttp3.Internal.Connection.RealConnection)
  routeDatabase(Lokhttp3/ConnectionPool;)Lokhttp3/internal/connection/RouteDatabase; = RouteDatabase(Okhttp3.ConnectionPool)
  setCache(Lokhttp3/OkHttpClient$Builder;Lokhttp3/internal/cache/InternalCache;)V = SetCache(Okhttp3.OkHttpClient.Builder, Okhttp3.Internal.Cache.IInternalCache)
  streamAllocation(Lokhttp3/Call;)Lokhttp3/internal/connection/StreamAllocation; = StreamAllocation(Okhttp3.ICall)
  timeoutExit(Lokhttp3/Call;Ljava/io/IOException;)Ljava/io/IOException; = TimeoutExit(Okhttp3.ICall, Java.IO.IOException)
okhttp3/internal/io/FileSystem = Okhttp3.Internal.IO.IFileSystem
  SYSTEM = System
  appendingSink(Ljava/io/File;)Lokio/Sink; = AppendingSink(Java.IO.File)
  delete(Ljava/io/File;)V = Delete(Java.IO.File)
  deleteContents(Ljava/io/File;)V = DeleteContents(Java.IO.File)
  exists(Ljava/io/File;)Z = Exists(Java.IO.File)
  rename(Ljava/io/File;Ljava/io/File;)V = Rename(Java.IO.File, Java.IO.File)
  sink(Ljava/io/File;)Lokio/Sink; = Sink(Java.IO.File)
  size(Ljava/io/File;)J = Size(Java.IO.File)
  source(Ljava/io/File;)Lokio/Source; = Source(Java.IO.File)
okhttp3/internal/NamedRunnable = Okhttp3.Internal.NamedRunnable
  <init>(Ljava/lang/String;[Ljava/lang/Object;)V = .ctor(string, params Java.Lang.Object[])
  name = Name
  execute()V = Execute()
  run()V = Run()
okhttp3/internal/platform/ConscryptPlatform = Okhttp3.Internal.Platform.ConscryptPlatform
  buildIfSupported()Lokhttp3/internal/platform/ConscryptPlatform; = BuildIfSupported()
  trustManager(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager; = TrustManager(Javax.Net.Ssl.SSLSocketFactory)
okhttp3/internal/platform/Platform = Okhttp3.Internal.Platform.Platform
  <init>()V = .ctor()
  INFO = Info
  WARN = Warn
  isConscryptPreferred()Z = IsConscryptPreferred
  getPrefix()Ljava/lang/String; = Prefix
  getSSLContext()Ljavax/net/ssl/SSLContext; = SSLContext
  afterHandshake(Ljavax/net/ssl/SSLSocket;)V = AfterHandshake(Javax.Net.Ssl.SSLSocket)
  alpnProtocolNames(Ljava/util/List;)Ljava/util/List; = AlpnProtocolNames(System.Collections.Generic.IList<Okhttp3.Protocol>)
  buildCertificateChainCleaner(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner; = BuildCertificateChainCleaner(Javax.Net.Ssl.SSLSocketFactory)
  buildCertificateChainCleaner(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner; = BuildCertificateChainCleaner(Javax.Net.Ssl.IX509TrustManager)
  buildTrustRootIndex(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/TrustRootIndex; = BuildTrustRootIndex(Javax.Net.Ssl.IX509TrustManager)
  configureSslSocketFactory(Ljavax/net/ssl/SSLSocketFactory;)V = ConfigureSslSocketFactory(Javax.Net.Ssl.SSLSocketFactory)
  configureTlsExtensions(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V = ConfigureTlsExtensions(Javax.Net.Ssl.SSLSocket, string, System.Collections.Generic.IList<Okhttp3.Protocol>)
  connectSocket(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V = ConnectSocket(Java.Net.Socket, Java.Net.InetSocketAddress, int)
  get()Lokhttp3/internal/platform/Platform; = Get()
  getSelectedProtocol(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String; = GetSelectedProtocol(Javax.Net.Ssl.SSLSocket)
  getStackTraceForCloseable(Ljava/lang/String;)Ljava/lang/Object; = GetStackTraceForCloseable(string)
  isCleartextTrafficPermitted(Ljava/lang/String;)Z = IsCleartextTrafficPermitted(string)
  log(ILjava/lang/String;Ljava/lang/Throwable;)V = Log(int, string, Java.Lang.Throwable)
  logCloseableLeak(Ljava/lang/String;Ljava/lang/Object;)V = LogCloseableLeak(string, Java.Lang.Object)
  trustManager(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager; = TrustManager(Javax.Net.Ssl.SSLSocketFactory)
okhttp3/internal/proxy/NullProxySelector = Okhttp3.Internal.Proxy.NullProxySelector
  <init>()V = .ctor()
  connectFailed(Ljava/net/URI;Ljava/net/SocketAddress;Ljava/io/IOException;)V = ConnectFailed(Java.Net.URI, Java.Net.SocketAddress, Java.IO.IOException)
  select(Ljava/net/URI;)Ljava/util/List; = Select(Java.Net.URI)
okhttp3/internal/publicsuffix/PublicSuffixDatabase = Okhttp3.Internal.Publicsuffix.PublicSuffixDatabase
  <init>()V = .ctor()
  PUBLIC_SUFFIX_RESOURCE = PublicSuffixResource
  get()Lokhttp3/internal/publicsuffix/PublicSuffixDatabase; = Get()
  getEffectiveTldPlusOne(Ljava/lang/String;)Ljava/lang/String; = GetEffectiveTldPlusOne(string)
okhttp3/internal/tls/BasicCertificateChainCleaner = Okhttp3.Internal.Tls.BasicCertificateChainCleaner
  <init>(Lokhttp3/internal/tls/TrustRootIndex;)V = .ctor(Okhttp3.Internal.Tls.ITrustRootIndex)
  clean(Ljava/util/List;Ljava/lang/String;)Ljava/util/List; = Clean(System.Collections.Generic.IList<Java.Security.Cert.Certificate>, string)
okhttp3/internal/tls/BasicTrustRootIndex = Okhttp3.Internal.Tls.BasicTrustRootIndex
  <init>([Ljava/security/cert/X509Certificate;)V = .ctor(params Java.Security.Cert.X509Certificate[])
  findByIssuerAndSignature(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate; = FindByIssuerAndSignature(Java.Security.Cert.X509Certificate)
okhttp3/internal/tls/CertificateChainCleaner = Okhttp3.Internal.Tls.CertificateChainCleaner
  <init>()V = .ctor()
  clean(Ljava/util/List;Ljava/lang/String;)Ljava/util/List; = Clean(System.Collections.Generic.IList<Java.Security.Cert.Certificate>, string)
  get([Ljava/security/cert/X509Certificate;)Lokhttp3/internal/tls/CertificateChainCleaner; = Get(params Java.Security.Cert.X509Certificate[])
  get(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner; = Get(Javax.Net.Ssl.IX509TrustManager)
okhttp3/internal/tls/OkHostnameVerifier = Okhttp3.Internal.Tls.OkHostnameVerifier
  INSTANCE = Instance
  allSubjectAltNames(Ljava/security/cert/X509Certificate;)Ljava/util/List; = AllSubjectAltNames(Java.Security.Cert.X509Certificate)
  verify(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z = Verify(string, Java.Security.Cert.X509Certificate)
  verify(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z = Verify(string, Javax.Net.Ssl.ISSLSession)
  verifyHostname(Ljava/lang/String;Ljava/lang/String;)Z = VerifyHostname(string, string)
okhttp3/internal/tls/TrustRootIndex = Okhttp3.Internal.Tls.ITrustRootIndex
  findByIssuerAndSignature(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate; = FindByIssuerAndSignature(Java.Security.Cert.X509Certificate)
okhttp3/internal/Util = Okhttp3.Internal.Util
  EMPTY_BYTE_ARRAY = EmptyByteArray
  EMPTY_REQUEST = EmptyRequest
  EMPTY_RESPONSE = EmptyResponse
  EMPTY_STRING_ARRAY = EmptyStringArray
  ISO_8859_1 = Iso88591
  NATURAL_ORDER = NaturalOrder
  UTC = Utc
  UTF_8 = Utf8
  addSuppressedIfPossible(Ljava/lang/Throwable;Ljava/lang/Throwable;)V = AddSuppressedIfPossible(Java.Lang.Throwable, Java.Lang.Throwable)
  assertionError(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError; = AssertionError(string, Java.Lang.Exception)
  bomAwareCharset(Lokio/BufferedSource;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset; = BomAwareCharset(Okio.IBufferedSource, Java.Nio.Charset.Charset)
  canonicalizeHost(Ljava/lang/String;)Ljava/lang/String; = CanonicalizeHost(string)
  checkDuration(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I = CheckDuration(string, long, Java.Util.Concurrent.TimeUnit)
  checkOffsetAndCount(JJJ)V = CheckOffsetAndCount(long, long, long)
  closeQuietly(Ljava/io/Closeable;)V = CloseQuietly(Java.IO.ICloseable)
  closeQuietly(Ljava/net/ServerSocket;)V = CloseQuietly(Java.Net.ServerSocket)
  closeQuietly(Ljava/net/Socket;)V = CloseQuietly(Java.Net.Socket)
  concat([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String; = Concat(string[], string)
  decodeHexDigit(C)I = DecodeHexDigit(char)
  delimiterOffset(Ljava/lang/String;IIC)I = DelimiterOffset(string, int, int, char)
  delimiterOffset(Ljava/lang/String;IILjava/lang/String;)I = DelimiterOffset(string, int, int, string)
  discard(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z = Discard(Okio.ISource, int, Java.Util.Concurrent.TimeUnit)
  equal(Ljava/lang/Object;Ljava/lang/Object;)Z = Equal(Java.Lang.Object, Java.Lang.Object)
  format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; = Format(string, params Java.Lang.Object[])
  hostHeader(Lokhttp3/HttpUrl;Z)Ljava/lang/String; = HostHeader(Okhttp3.HttpUrl, bool)
  immutableList(Ljava/util/List;)Ljava/util/List; = ImmutableList(System.Collections.IList)
  immutableList([Ljava/lang/Object;)Ljava/util/List; = ImmutableList(params Java.Lang.Object[])
  immutableMap(Ljava/util/Map;)Ljava/util/Map; = ImmutableMap(System.Collections.IDictionary)
  indexOf(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I = IndexOf(Java.Util.IComparator, string[], string)
  indexOfControlOrNonAscii(Ljava/lang/String;)I = IndexOfControlOrNonAscii(string)
  intersect(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String; = Intersect(Java.Util.IComparator, string[], string[])
  isAndroidGetsocknameError(Ljava/lang/AssertionError;)Z = IsAndroidGetsocknameError(Java.Lang.AssertionError)
  nonEmptyIntersection(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z = NonEmptyIntersection(Java.Util.IComparator, string[], string[])
  platformTrustManager()Ljavax/net/ssl/X509TrustManager; = PlatformTrustManager()
  skipAll(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z = SkipAll(Okio.ISource, int, Java.Util.Concurrent.TimeUnit)
  skipLeadingAsciiWhitespace(Ljava/lang/String;II)I = SkipLeadingAsciiWhitespace(string, int, int)
  skipTrailingAsciiWhitespace(Ljava/lang/String;II)I = SkipTrailingAsciiWhitespace(string, int, int)
  threadFactory(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory; = ThreadFactory(string, bool)
  toHeaders(Ljava/util/List;)Lokhttp3/Headers; = ToHeaders(System.Collections.Generic.IList<Okhttp3.Internal.Http2.Header>)
  trimSubstring(Ljava/lang/String;II)Ljava/lang/String; = TrimSubstring(string, int, int)
  verifyAsIpAddress(Ljava/lang/String;)Z = VerifyAsIpAddress(string)
okhttp3/internal/Version = Okhttp3.Internal.Version
  userAgent()Ljava/lang/String; = UserAgent()
okhttp3/internal/ws/RealWebSocket = Okhttp3.Internal.WS.RealWebSocket
  <init>(Lokhttp3/Request;Lokhttp3/WebSocketListener;Ljava/util/Random;J)V = .ctor(Okhttp3.Request, Okhttp3.WebSocketListener, Java.Util.Random, long)
  cancel()V = Cancel()
  connect(Lokhttp3/OkHttpClient;)V = Connect(Okhttp3.OkHttpClient)
  failWebSocket(Ljava/lang/Exception;Lokhttp3/Response;)V = FailWebSocket(Java.Lang.Exception, Okhttp3.Response)
  initReaderAndWriter(Ljava/lang/String;Lokhttp3/internal/ws/RealWebSocket$Streams;)V = InitReaderAndWriter(string, Okhttp3.Internal.WS.RealWebSocket.Streams)
  close(ILjava/lang/String;)Z = InvokeClose(int, string)
  loopReader()V = LoopReader()
  onReadClose(ILjava/lang/String;)V = OnReadClose(int, string)
  onReadMessage(Ljava/lang/String;)V = OnReadMessage(string)
  onReadMessage(Lokio/ByteString;)V = OnReadMessage(Okio.ByteString)
  onReadPing(Lokio/ByteString;)V = OnReadPing(Okio.ByteString)
  onReadPong(Lokio/ByteString;)V = OnReadPong(Okio.ByteString)
  queueSize()J = QueueSize()
  request()Lokhttp3/Request; = Request()
  send(Ljava/lang/String;)Z = Send(string)
  send(Lokio/ByteString;)Z = Send(Okio.ByteString)
okhttp3/internal/ws/WebSocketProtocol = Okhttp3.Internal.WS.WebSocketProtocol
  acceptHeader(Ljava/lang/String;)Ljava/lang/String; = AcceptHeader(string)
okhttp3/internal/ws/WebSocketReader = Okhttp3.Internal.WS.WebSocketReader
okhttp3/MediaType = Okhttp3.MediaType
  charset()Ljava/nio/charset/Charset; = Charset()
  charset(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset; = Charset(Java.Nio.Charset.Charset)
  get(Ljava/lang/String;)Lokhttp3/MediaType; = Get(string)
  parse(Ljava/lang/String;)Lokhttp3/MediaType; = Parse(string)
  subtype()Ljava/lang/String; = Subtype()
  type()Ljava/lang/String; = Type()
okhttp3/MultipartBody = Okhttp3.MultipartBody
  ALTERNATIVE = Alternative
  DIGEST = Digest
  FORM = Form
  MIXED = Mixed
  PARALLEL = Parallel
  boundary()Ljava/lang/String; = Boundary()
  contentType()Lokhttp3/MediaType; = ContentType()
  part(I)Lokhttp3/MultipartBody$Part; = InvokePart(int)
  parts()Ljava/util/List; = Parts()
  size()I = Size()
  type()Lokhttp3/MediaType; = Type()
  writeTo(Lokio/BufferedSink;)V = WriteTo(Okio.IBufferedSink)
okhttp3/OkHttpClient = Okhttp3.OkHttpClient
  <init>()V = .ctor()
  authenticator()Lokhttp3/Authenticator; = Authenticator()
  cache()Lokhttp3/Cache; = Cache()
  callTimeoutMillis()I = CallTimeoutMillis()
  certificatePinner()Lokhttp3/CertificatePinner; = CertificatePinner()
  connectionPool()Lokhttp3/ConnectionPool; = ConnectionPool()
  connectionSpecs()Ljava/util/List; = ConnectionSpecs()
  connectTimeoutMillis()I = ConnectTimeoutMillis()
  cookieJar()Lokhttp3/CookieJar; = CookieJar()
  dispatcher()Lokhttp3/Dispatcher; = Dispatcher()
  dns()Lokhttp3/Dns; = Dns()
  eventListenerFactory()Lokhttp3/EventListener$Factory; = EventListenerFactory()
  followRedirects()Z = FollowRedirects()
  followSslRedirects()Z = FollowSslRedirects()
  hostnameVerifier()Ljavax/net/ssl/HostnameVerifier; = HostnameVerifier()
  interceptors()Ljava/util/List; = Interceptors()
  networkInterceptors()Ljava/util/List; = NetworkInterceptors()
  newBuilder()Lokhttp3/OkHttpClient$Builder; = NewBuilder()
  newCall(Lokhttp3/Request;)Lokhttp3/Call; = NewCall(Okhttp3.Request)
  newWebSocket(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket; = NewWebSocket(Okhttp3.Request, Okhttp3.WebSocketListener)
  pingIntervalMillis()I = PingIntervalMillis()
  protocols()Ljava/util/List; = Protocols()
  proxy()Ljava/net/Proxy; = Proxy()
  proxyAuthenticator()Lokhttp3/Authenticator; = ProxyAuthenticator()
  proxySelector()Ljava/net/ProxySelector; = ProxySelector()
  readTimeoutMillis()I = ReadTimeoutMillis()
  retryOnConnectionFailure()Z = RetryOnConnectionFailure()
  socketFactory()Ljavax/net/SocketFactory; = SocketFactory()
  sslSocketFactory()Ljavax/net/ssl/SSLSocketFactory; = SslSocketFactory()
  writeTimeoutMillis()I = WriteTimeoutMillis()
okhttp3/Protocol = Okhttp3.Protocol
  H2_PRIOR_KNOWLEDGE = H2PriorKnowledge
  HTTP_1_0 = Http10
  HTTP_1_1 = Http11
  HTTP_2 = Http2
  QUIC = Quic
  SPDY_3 = Spdy3
  get(Ljava/lang/String;)Lokhttp3/Protocol; = Get(string)
  valueOf(Ljava/lang/String;)Lokhttp3/Protocol; = ValueOf(string)
  values()[Lokhttp3/Protocol; = Values()
okhttp3/Request = Okhttp3.Request
  isHttps()Z = IsHttps
  body()Lokhttp3/RequestBody; = Body()
  cacheControl()Lokhttp3/CacheControl; = CacheControl()
  header(Ljava/lang/String;)Ljava/lang/String; = Header(string)
  headers()Lokhttp3/Headers; = Headers()
  headers(Ljava/lang/String;)Ljava/util/List; = Headers(string)
  method()Ljava/lang/String; = Method()
  newBuilder()Lokhttp3/Request$Builder; = NewBuilder()
  tag()Ljava/lang/Object; = Tag()
  tag(Ljava/lang/Class;)Ljava/lang/Object; = Tag(Java.Lang.Class)
  url()Lokhttp3/HttpUrl; = Url()
okhttp3/RequestBody = Okhttp3.RequestBody
  <init>()V = .ctor()
  contentLength()J = ContentLength()
  contentType()Lokhttp3/MediaType; = ContentType()
  create(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody; = Create(Okhttp3.MediaType, byte[])
  create(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody; = Create(Okhttp3.MediaType, byte[], int, int)
  create(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody; = Create(Okhttp3.MediaType, Java.IO.File)
  create(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody; = Create(Okhttp3.MediaType, string)
  create(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody; = Create(Okhttp3.MediaType, Okio.ByteString)
  writeTo(Lokio/BufferedSink;)V = WriteTo(Okio.IBufferedSink)
okhttp3/Response = Okhttp3.Response
  isRedirect()Z = IsRedirect
  isSuccessful()Z = IsSuccessful
  body()Lokhttp3/ResponseBody; = Body()
  cacheControl()Lokhttp3/CacheControl; = CacheControl()
  cacheResponse()Lokhttp3/Response; = CacheResponse()
  challenges()Ljava/util/List; = Challenges()
  close()V = Close()
  code()I = Code()
  handshake()Lokhttp3/Handshake; = Handshake()
  header(Ljava/lang/String;)Ljava/lang/String; = Header(string)
  header(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Header(string, string)
  headers()Lokhttp3/Headers; = Headers()
  headers(Ljava/lang/String;)Ljava/util/List; = Headers(string)
  message()Ljava/lang/String; = Message()
  networkResponse()Lokhttp3/Response; = NetworkResponse()
  newBuilder()Lokhttp3/Response$Builder; = NewBuilder()
  peekBody(J)Lokhttp3/ResponseBody; = PeekBody(long)
  priorResponse()Lokhttp3/Response; = PriorResponse()
  protocol()Lokhttp3/Protocol; = Protocol()
  receivedResponseAtMillis()J = ReceivedResponseAtMillis()
  request()Lokhttp3/Request; = Request()
  sentRequestAtMillis()J = SentRequestAtMillis()
okhttp3/ResponseBody = Okhttp3.ResponseBody
  <init>()V = .ctor()
  bytes()[B = Bytes()
  byteStream()Ljava/io/InputStream; = ByteStream()
  charStream()Ljava/io/Reader; = CharStream()
  close()V = Close()
  contentLength()J = ContentLength()
  contentType()Lokhttp3/MediaType; = ContentType()
  create(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody; = Create(Okhttp3.MediaType, byte[])
  create(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/ResponseBody; = Create(Okhttp3.MediaType, string)
  create(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody; = Create(Okhttp3.MediaType, long, Okio.IBufferedSource)
  create(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/ResponseBody; = Create(Okhttp3.MediaType, Okio.ByteString)
  source()Lokio/BufferedSource; = Source()
  string()Ljava/lang/String; = String()
okhttp3/Route = Okhttp3.Route
  <init>(Lokhttp3/Address;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V = .ctor(Okhttp3.Address, Java.Net.Proxy, Java.Net.InetSocketAddress)
  address()Lokhttp3/Address; = Address()
  proxy()Ljava/net/Proxy; = Proxy()
  requiresTunnel()Z = RequiresTunnel()
  socketAddress()Ljava/net/InetSocketAddress; = SocketAddress()
okhttp3/TlsVersion = Okhttp3.TlsVersion
  SSL_3_0 = Ssl30
  TLS_1_0 = Tls10
  TLS_1_1 = Tls11
  TLS_1_2 = Tls12
  TLS_1_3 = Tls13
  forJavaName(Ljava/lang/String;)Lokhttp3/TlsVersion; = ForJavaName(string)
  javaName()Ljava/lang/String; = JavaName()
  valueOf(Ljava/lang/String;)Lokhttp3/TlsVersion; = ValueOf(string)
  values()[Lokhttp3/TlsVersion; = Values()
okhttp3/WebSocket = Okhttp3.IWebSocket
  cancel()V = Cancel()
  close(ILjava/lang/String;)Z = Close(int, string)
  queueSize()J = QueueSize()
  request()Lokhttp3/Request; = Request()
  send(Ljava/lang/String;)Z = Send(string)
  send(Lokio/ByteString;)Z = Send(Okio.ByteString)
okhttp3/WebSocketListener = Okhttp3.WebSocketListener
  <init>()V = .ctor()
  onClosed(Lokhttp3/WebSocket;ILjava/lang/String;)V = OnClosed(Okhttp3.IWebSocket, int, string)
  onClosing(Lokhttp3/WebSocket;ILjava/lang/String;)V = OnClosing(Okhttp3.IWebSocket, int, string)
  onFailure(Lokhttp3/WebSocket;Ljava/lang/Throwable;Lokhttp3/Response;)V = OnFailure(Okhttp3.IWebSocket, Java.Lang.Throwable, Okhttp3.Response)
  onMessage(Lokhttp3/WebSocket;Ljava/lang/String;)V = OnMessage(Okhttp3.IWebSocket, string)
  onMessage(Lokhttp3/WebSocket;Lokio/ByteString;)V = OnMessage(Okhttp3.IWebSocket, Okio.ByteString)
  onOpen(Lokhttp3/WebSocket;Lokhttp3/Response;)V = OnOpen(Okhttp3.IWebSocket, Okhttp3.Response)
