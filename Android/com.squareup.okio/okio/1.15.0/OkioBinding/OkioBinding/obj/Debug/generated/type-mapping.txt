okio/AsyncTimeout = Okio.AsyncTimeout
  <init>()V = .ctor()
  enter()V = Enter()
  exit()Z = Exit()
  newTimeoutException(Ljava/io/IOException;)Ljava/io/IOException; = NewTimeoutException(Java.IO.IOException)
  sink(Lokio/Sink;)Lokio/Sink; = Sink(Okio.ISink)
  source(Lokio/Source;)Lokio/Source; = Source(Okio.ISource)
  timedOut()V = TimedOut()
okio/Buffer = Okio.Buffer
  <init>()V = .ctor()
  isOpen()Z = IsOpen
  clear()V = Clear()
  clone()Lokio/Buffer; = Clone()
  close()V = Close()
  completeSegmentByteCount()J = CompleteSegmentByteCount()
  copyTo(Ljava/io/OutputStream;)Lokio/Buffer; = CopyTo(System.IO.Stream)
  copyTo(Ljava/io/OutputStream;JJ)Lokio/Buffer; = CopyTo(System.IO.Stream, long, long)
  copyTo(Lokio/Buffer;JJ)Lokio/Buffer; = CopyTo(Okio.Buffer, long, long)
  emit()Lokio/BufferedSink; = Emit()
  emitCompleteSegments()Lokio/Buffer; = EmitCompleteSegments()
  exhausted()Z = Exhausted()
  flush()V = Flush()
  getByte(J)B = GetByte(long)
  hmacSha1(Lokio/ByteString;)Lokio/ByteString; = HmacSha1(Okio.ByteString)
  hmacSha256(Lokio/ByteString;)Lokio/ByteString; = HmacSha256(Okio.ByteString)
  hmacSha512(Lokio/ByteString;)Lokio/ByteString; = HmacSha512(Okio.ByteString)
  indexOf(B)J = IndexOf(sbyte)
  indexOf(BJ)J = IndexOf(sbyte, long)
  indexOf(BJJ)J = IndexOf(sbyte, long, long)
  indexOf(Lokio/ByteString;)J = IndexOf(Okio.ByteString)
  indexOf(Lokio/ByteString;J)J = IndexOf(Okio.ByteString, long)
  indexOfElement(Lokio/ByteString;)J = IndexOfElement(Okio.ByteString)
  indexOfElement(Lokio/ByteString;J)J = IndexOfElement(Okio.ByteString, long)
  inputStream()Ljava/io/InputStream; = InputStream()
  buffer()Lokio/Buffer; = InvokeBuffer()
  md5()Lokio/ByteString; = Md5()
  outputStream()Ljava/io/OutputStream; = OutputStream()
  rangeEquals(JLokio/ByteString;)Z = RangeEquals(long, Okio.ByteString)
  rangeEquals(JLokio/ByteString;II)Z = RangeEquals(long, Okio.ByteString, int, int)
  read([B)I = Read(byte[])
  read([BII)I = Read(byte[], int, int)
  read(Ljava/nio/ByteBuffer;)I = Read(Java.Nio.ByteBuffer)
  read(Lokio/Buffer;J)J = Read(Okio.Buffer, long)
  readAll(Lokio/Sink;)J = ReadAll(Okio.ISink)
  readAndWriteUnsafe()Lokio/Buffer$UnsafeCursor; = ReadAndWriteUnsafe()
  readAndWriteUnsafe(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor; = ReadAndWriteUnsafe(Okio.Buffer.UnsafeCursor)
  readByte()B = ReadByte()
  readByteArray()[B = ReadByteArray()
  readByteArray(J)[B = ReadByteArray(long)
  readByteString()Lokio/ByteString; = ReadByteString()
  readByteString(J)Lokio/ByteString; = ReadByteString(long)
  readDecimalLong()J = ReadDecimalLong()
  readFrom(Ljava/io/InputStream;)Lokio/Buffer; = ReadFrom(System.IO.Stream)
  readFrom(Ljava/io/InputStream;J)Lokio/Buffer; = ReadFrom(System.IO.Stream, long)
  readFully([B)V = ReadFully(byte[])
  readFully(Lokio/Buffer;J)V = ReadFully(Okio.Buffer, long)
  readHexadecimalUnsignedLong()J = ReadHexadecimalUnsignedLong()
  readInt()I = ReadInt()
  readIntLe()I = ReadIntLe()
  readLong()J = ReadLong()
  readLongLe()J = ReadLongLe()
  readShort()S = ReadShort()
  readShortLe()S = ReadShortLe()
  readString(Ljava/nio/charset/Charset;)Ljava/lang/String; = ReadString(Java.Nio.Charset.Charset)
  readString(JLjava/nio/charset/Charset;)Ljava/lang/String; = ReadString(long, Java.Nio.Charset.Charset)
  readUnsafe()Lokio/Buffer$UnsafeCursor; = ReadUnsafe()
  readUnsafe(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor; = ReadUnsafe(Okio.Buffer.UnsafeCursor)
  readUtf8()Ljava/lang/String; = ReadUtf8()
  readUtf8(J)Ljava/lang/String; = ReadUtf8(long)
  readUtf8CodePoint()I = ReadUtf8CodePoint()
  readUtf8Line()Ljava/lang/String; = ReadUtf8Line()
  readUtf8LineStrict()Ljava/lang/String; = ReadUtf8LineStrict()
  readUtf8LineStrict(J)Ljava/lang/String; = ReadUtf8LineStrict(long)
  request(J)Z = Request(long)
  require(J)V = Require(long)
  select(Lokio/Options;)I = Select(Okio.Options)
  sha1()Lokio/ByteString; = Sha1()
  sha256()Lokio/ByteString; = Sha256()
  sha512()Lokio/ByteString; = Sha512()
  size()J = Size()
  skip(J)V = Skip(long)
  snapshot()Lokio/ByteString; = Snapshot()
  snapshot(I)Lokio/ByteString; = Snapshot(int)
  timeout()Lokio/Timeout; = Timeout()
  write([B)Lokio/Buffer; = Write(byte[])
  write([BII)Lokio/Buffer; = Write(byte[], int, int)
  write(Ljava/nio/ByteBuffer;)I = Write(Java.Nio.ByteBuffer)
  write(Lokio/Buffer;J)V = Write(Okio.Buffer, long)
  write(Lokio/ByteString;)Lokio/Buffer; = Write(Okio.ByteString)
  write(Lokio/Source;J)Lokio/BufferedSink; = Write(Okio.ISource, long)
  writeAll(Lokio/Source;)J = WriteAll(Okio.ISource)
  writeByte(I)Lokio/Buffer; = WriteByte(int)
  writeDecimalLong(J)Lokio/Buffer; = WriteDecimalLong(long)
  writeHexadecimalUnsignedLong(J)Lokio/Buffer; = WriteHexadecimalUnsignedLong(long)
  writeInt(I)Lokio/Buffer; = WriteInt(int)
  writeIntLe(I)Lokio/Buffer; = WriteIntLe(int)
  writeLong(J)Lokio/Buffer; = WriteLong(long)
  writeLongLe(J)Lokio/Buffer; = WriteLongLe(long)
  writeShort(I)Lokio/Buffer; = WriteShort(int)
  writeShortLe(I)Lokio/Buffer; = WriteShortLe(int)
  writeString(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer; = WriteString(string, int, int, Java.Nio.Charset.Charset)
  writeString(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer; = WriteString(string, Java.Nio.Charset.Charset)
  writeTo(Ljava/io/OutputStream;)Lokio/Buffer; = WriteTo(System.IO.Stream)
  writeTo(Ljava/io/OutputStream;J)Lokio/Buffer; = WriteTo(System.IO.Stream, long)
  writeUtf8(Ljava/lang/String;)Lokio/Buffer; = WriteUtf8(string)
  writeUtf8(Ljava/lang/String;II)Lokio/Buffer; = WriteUtf8(string, int, int)
  writeUtf8CodePoint(I)Lokio/Buffer; = WriteUtf8CodePoint(int)
okio/BufferedSink = Okio.IBufferedSink
  buffer()Lokio/Buffer; = Buffer()
  close()V = Close()
  emit()Lokio/BufferedSink; = Emit()
  emitCompleteSegments()Lokio/BufferedSink; = EmitCompleteSegments()
  flush()V = Flush()
  outputStream()Ljava/io/OutputStream; = OutputStream()
  write([B)Lokio/BufferedSink; = Write(byte[])
  write([BII)Lokio/BufferedSink; = Write(byte[], int, int)
  write(Lokio/ByteString;)Lokio/BufferedSink; = Write(Okio.ByteString)
  write(Lokio/Source;J)Lokio/BufferedSink; = Write(Okio.ISource, long)
  writeAll(Lokio/Source;)J = WriteAll(Okio.ISource)
  writeByte(I)Lokio/BufferedSink; = WriteByte(int)
  writeDecimalLong(J)Lokio/BufferedSink; = WriteDecimalLong(long)
  writeHexadecimalUnsignedLong(J)Lokio/BufferedSink; = WriteHexadecimalUnsignedLong(long)
  writeInt(I)Lokio/BufferedSink; = WriteInt(int)
  writeIntLe(I)Lokio/BufferedSink; = WriteIntLe(int)
  writeLong(J)Lokio/BufferedSink; = WriteLong(long)
  writeLongLe(J)Lokio/BufferedSink; = WriteLongLe(long)
  writeShort(I)Lokio/BufferedSink; = WriteShort(int)
  writeShortLe(I)Lokio/BufferedSink; = WriteShortLe(int)
  writeString(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink; = WriteString(string, int, int, Java.Nio.Charset.Charset)
  writeString(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink; = WriteString(string, Java.Nio.Charset.Charset)
  writeUtf8(Ljava/lang/String;)Lokio/BufferedSink; = WriteUtf8(string)
  writeUtf8(Ljava/lang/String;II)Lokio/BufferedSink; = WriteUtf8(string, int, int)
  writeUtf8CodePoint(I)Lokio/BufferedSink; = WriteUtf8CodePoint(int)
okio/BufferedSource = Okio.IBufferedSource
  buffer()Lokio/Buffer; = Buffer()
  close()V = Close()
  exhausted()Z = Exhausted()
  indexOf(B)J = IndexOf(sbyte)
  indexOf(BJ)J = IndexOf(sbyte, long)
  indexOf(BJJ)J = IndexOf(sbyte, long, long)
  indexOf(Lokio/ByteString;)J = IndexOf(Okio.ByteString)
  indexOf(Lokio/ByteString;J)J = IndexOf(Okio.ByteString, long)
  indexOfElement(Lokio/ByteString;)J = IndexOfElement(Okio.ByteString)
  indexOfElement(Lokio/ByteString;J)J = IndexOfElement(Okio.ByteString, long)
  inputStream()Ljava/io/InputStream; = InputStream()
  rangeEquals(JLokio/ByteString;)Z = RangeEquals(long, Okio.ByteString)
  rangeEquals(JLokio/ByteString;II)Z = RangeEquals(long, Okio.ByteString, int, int)
  read([B)I = Read(byte[])
  read([BII)I = Read(byte[], int, int)
  readAll(Lokio/Sink;)J = ReadAll(Okio.ISink)
  readByte()B = ReadByte()
  readByteArray()[B = ReadByteArray()
  readByteArray(J)[B = ReadByteArray(long)
  readByteString()Lokio/ByteString; = ReadByteString()
  readByteString(J)Lokio/ByteString; = ReadByteString(long)
  readDecimalLong()J = ReadDecimalLong()
  readFully([B)V = ReadFully(byte[])
  readFully(Lokio/Buffer;J)V = ReadFully(Okio.Buffer, long)
  readHexadecimalUnsignedLong()J = ReadHexadecimalUnsignedLong()
  readInt()I = ReadInt()
  readIntLe()I = ReadIntLe()
  readLong()J = ReadLong()
  readLongLe()J = ReadLongLe()
  readShort()S = ReadShort()
  readShortLe()S = ReadShortLe()
  readString(Ljava/nio/charset/Charset;)Ljava/lang/String; = ReadString(Java.Nio.Charset.Charset)
  readString(JLjava/nio/charset/Charset;)Ljava/lang/String; = ReadString(long, Java.Nio.Charset.Charset)
  readUtf8()Ljava/lang/String; = ReadUtf8()
  readUtf8(J)Ljava/lang/String; = ReadUtf8(long)
  readUtf8CodePoint()I = ReadUtf8CodePoint()
  readUtf8Line()Ljava/lang/String; = ReadUtf8Line()
  readUtf8LineStrict()Ljava/lang/String; = ReadUtf8LineStrict()
  readUtf8LineStrict(J)Ljava/lang/String; = ReadUtf8LineStrict(long)
  request(J)Z = Request(long)
  require(J)V = Require(long)
  select(Lokio/Options;)I = Select(Okio.Options)
  skip(J)V = Skip(long)
okio/ByteString = Okio.ByteString
  EMPTY = Empty
  asByteBuffer()Ljava/nio/ByteBuffer; = AsByteBuffer()
  base64()Ljava/lang/String; = Base64()
  base64Url()Ljava/lang/String; = Base64Url()
  decodeBase64(Ljava/lang/String;)Lokio/ByteString; = DecodeBase64(string)
  decodeHex(Ljava/lang/String;)Lokio/ByteString; = DecodeHex(string)
  encodeString(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/ByteString; = EncodeString(string, Java.Nio.Charset.Charset)
  encodeUtf8(Ljava/lang/String;)Lokio/ByteString; = EncodeUtf8(string)
  endsWith([B)Z = EndsWith(byte[])
  endsWith(Lokio/ByteString;)Z = EndsWith(Okio.ByteString)
  getByte(I)B = GetByte(int)
  hex()Ljava/lang/String; = Hex()
  hmacSha1(Lokio/ByteString;)Lokio/ByteString; = HmacSha1(Okio.ByteString)
  hmacSha256(Lokio/ByteString;)Lokio/ByteString; = HmacSha256(Okio.ByteString)
  hmacSha512(Lokio/ByteString;)Lokio/ByteString; = HmacSha512(Okio.ByteString)
  indexOf([B)I = IndexOf(byte[])
  indexOf([BI)I = IndexOf(byte[], int)
  indexOf(Lokio/ByteString;)I = IndexOf(Okio.ByteString)
  indexOf(Lokio/ByteString;I)I = IndexOf(Okio.ByteString, int)
  lastIndexOf([B)I = LastIndexOf(byte[])
  lastIndexOf([BI)I = LastIndexOf(byte[], int)
  lastIndexOf(Lokio/ByteString;)I = LastIndexOf(Okio.ByteString)
  lastIndexOf(Lokio/ByteString;I)I = LastIndexOf(Okio.ByteString, int)
  md5()Lokio/ByteString; = Md5()
  of([B)Lokio/ByteString; = Of(params byte[])
  of([BII)Lokio/ByteString; = Of(byte[], int, int)
  of(Ljava/nio/ByteBuffer;)Lokio/ByteString; = Of(Java.Nio.ByteBuffer)
  rangeEquals(I[BII)Z = RangeEquals(int, byte[], int, int)
  rangeEquals(ILokio/ByteString;II)Z = RangeEquals(int, Okio.ByteString, int, int)
  compareTo(Lokio/ByteString;)I = RawCompareTo(Okio.ByteString)
  read(Ljava/io/InputStream;I)Lokio/ByteString; = Read(System.IO.Stream, int)
  sha1()Lokio/ByteString; = Sha1()
  sha256()Lokio/ByteString; = Sha256()
  sha512()Lokio/ByteString; = Sha512()
  size()I = Size()
  startsWith([B)Z = StartsWith(byte[])
  startsWith(Lokio/ByteString;)Z = StartsWith(Okio.ByteString)
  string(Ljava/nio/charset/Charset;)Ljava/lang/String; = String(Java.Nio.Charset.Charset)
  substring(I)Lokio/ByteString; = Substring(int)
  substring(II)Lokio/ByteString; = Substring(int, int)
  toAsciiLowercase()Lokio/ByteString; = ToAsciiLowercase()
  toAsciiUppercase()Lokio/ByteString; = ToAsciiUppercase()
  toByteArray()[B = ToByteArray()
  utf8()Ljava/lang/String; = Utf8()
  write(Ljava/io/OutputStream;)V = Write(System.IO.Stream)
okio/DeflaterSink = Okio.DeflaterSink
  <init>(Lokio/Sink;Ljava/util/zip/Deflater;)V = .ctor(Okio.ISink, Java.Util.Zip.Deflater)
  close()V = Close()
  flush()V = Flush()
  timeout()Lokio/Timeout; = Timeout()
  write(Lokio/Buffer;J)V = Write(Okio.Buffer, long)
okio/ForwardingSink = Okio.ForwardingSink
  <init>(Lokio/Sink;)V = .ctor(Okio.ISink)
  close()V = Close()
  delegate()Lokio/Sink; = Delegate()
  flush()V = Flush()
  timeout()Lokio/Timeout; = Timeout()
  write(Lokio/Buffer;J)V = Write(Okio.Buffer, long)
okio/ForwardingSource = Okio.ForwardingSource
  <init>(Lokio/Source;)V = .ctor(Okio.ISource)
  close()V = Close()
  delegate()Lokio/Source; = Delegate()
  read(Lokio/Buffer;J)J = Read(Okio.Buffer, long)
  timeout()Lokio/Timeout; = Timeout()
okio/ForwardingTimeout = Okio.ForwardingTimeout
  <init>(Lokio/Timeout;)V = .ctor(Okio.Timeout)
  delegate()Lokio/Timeout; = Delegate()
  setDelegate(Lokio/Timeout;)Lokio/ForwardingTimeout; = SetDelegate(Okio.Timeout)
okio/GzipSink = Okio.GzipSink
  <init>(Lokio/Sink;)V = .ctor(Okio.ISink)
  close()V = Close()
  deflater()Ljava/util/zip/Deflater; = Deflater()
  flush()V = Flush()
  timeout()Lokio/Timeout; = Timeout()
  write(Lokio/Buffer;J)V = Write(Okio.Buffer, long)
okio/GzipSource = Okio.GzipSource
  <init>(Lokio/Source;)V = .ctor(Okio.ISource)
  close()V = Close()
  read(Lokio/Buffer;J)J = Read(Okio.Buffer, long)
  timeout()Lokio/Timeout; = Timeout()
okio/HashingSink = Okio.HashingSink
  hash()Lokio/ByteString; = Hash()
  hmacSha1(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink; = HmacSha1(Okio.ISink, Okio.ByteString)
  hmacSha256(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink; = HmacSha256(Okio.ISink, Okio.ByteString)
  hmacSha512(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink; = HmacSha512(Okio.ISink, Okio.ByteString)
  md5(Lokio/Sink;)Lokio/HashingSink; = Md5(Okio.ISink)
  sha1(Lokio/Sink;)Lokio/HashingSink; = Sha1(Okio.ISink)
  sha256(Lokio/Sink;)Lokio/HashingSink; = Sha256(Okio.ISink)
  sha512(Lokio/Sink;)Lokio/HashingSink; = Sha512(Okio.ISink)
okio/HashingSource = Okio.HashingSource
  hash()Lokio/ByteString; = Hash()
  hmacSha1(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource; = HmacSha1(Okio.ISource, Okio.ByteString)
  hmacSha256(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource; = HmacSha256(Okio.ISource, Okio.ByteString)
  md5(Lokio/Source;)Lokio/HashingSource; = Md5(Okio.ISource)
  sha1(Lokio/Source;)Lokio/HashingSource; = Sha1(Okio.ISource)
  sha256(Lokio/Source;)Lokio/HashingSource; = Sha256(Okio.ISource)
okio/InflaterSource = Okio.InflaterSource
  <init>(Lokio/Source;Ljava/util/zip/Inflater;)V = .ctor(Okio.ISource, Java.Util.Zip.Inflater)
  close()V = Close()
  read(Lokio/Buffer;J)J = Read(Okio.Buffer, long)
  refill()Z = Refill()
  timeout()Lokio/Timeout; = Timeout()
okio/Okio = Okio.Okio
  appendingSink(Ljava/io/File;)Lokio/Sink; = AppendingSink(Java.IO.File)
  blackhole()Lokio/Sink; = Blackhole()
  buffer(Lokio/Sink;)Lokio/BufferedSink; = Buffer(Okio.ISink)
  buffer(Lokio/Source;)Lokio/BufferedSource; = Buffer(Okio.ISource)
  sink(Ljava/io/File;)Lokio/Sink; = Sink(Java.IO.File)
  sink(Ljava/io/OutputStream;)Lokio/Sink; = Sink(System.IO.Stream)
  sink(Ljava/net/Socket;)Lokio/Sink; = Sink(Java.Net.Socket)
  sink(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Sink; = Sink(Java.Nio.FileNio.IPath, params Java.Nio.FileNio.IOpenOption[])
  source(Ljava/io/File;)Lokio/Source; = Source(Java.IO.File)
  source(Ljava/io/InputStream;)Lokio/Source; = Source(System.IO.Stream)
  source(Ljava/net/Socket;)Lokio/Source; = Source(Java.Net.Socket)
  source(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Source; = Source(Java.Nio.FileNio.IPath, params Java.Nio.FileNio.IOpenOption[])
okio/Options = Okio.Options
  of([Lokio/ByteString;)Lokio/Options; = Of(params Okio.ByteString[])
  size()I = Size()
okio/Pipe = Okio.Pipe
  <init>(J)V = .ctor(long)
  sink()Lokio/Sink; = Sink()
  source()Lokio/Source; = Source()
okio/Sink = Okio.ISink
  close()V = Close()
  flush()V = Flush()
  timeout()Lokio/Timeout; = Timeout()
  write(Lokio/Buffer;J)V = Write(Okio.Buffer, long)
okio/Source = Okio.ISource
  close()V = Close()
  read(Lokio/Buffer;J)J = Read(Okio.Buffer, long)
  timeout()Lokio/Timeout; = Timeout()
okio/Timeout = Okio.Timeout
  <init>()V = .ctor()
  NONE = None
  hasDeadline()Z = HasDeadline
  clearDeadline()Lokio/Timeout; = ClearDeadline()
  clearTimeout()Lokio/Timeout; = ClearTimeout()
  deadline(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout; = Deadline(long, Java.Util.Concurrent.TimeUnit)
  deadlineNanoTime()J = DeadlineNanoTime()
  deadlineNanoTime(J)Lokio/Timeout; = DeadlineNanoTime(long)
  timeout(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout; = InvokeTimeout(long, Java.Util.Concurrent.TimeUnit)
  throwIfReached()V = ThrowIfReached()
  timeoutNanos()J = TimeoutNanos()
  waitUntilNotified(Ljava/lang/Object;)V = WaitUntilNotified(Java.Lang.Object)
okio/Utf8 = Okio.Utf8
  size(Ljava/lang/String;)J = Size(string)
  size(Ljava/lang/String;II)J = Size(string, int, int)
